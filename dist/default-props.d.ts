import React from 'react';
import * as MComponents from './components';
import PropTypes from 'prop-types';
export declare const defaultProps: {
    actions: never[];
    classes: {};
    columns: never[];
    components: {
        Action: typeof MComponents.MTableAction;
        Actions: typeof MComponents.MTableActions;
        Body: typeof MComponents.MTableBody;
        Cell: typeof MComponents.MTableCell;
        Container: (props: any) => JSX.Element;
        EditField: typeof MComponents.MTableEditField;
        EditRow: typeof MComponents.MTableEditRow;
        FilterRow: typeof MComponents.MTableFilterRow;
        Groupbar: typeof MComponents.MTableGroupbar;
        GroupRow: typeof MComponents.MTableGroupRow;
        Header: React.ComponentType<Pick<any, string | number | symbol> & import("@material-ui/core").StyledComponentProps<"header">>;
        OverlayLoading: {
            (props: any): JSX.Element;
            propTypes: {
                theme: PropTypes.Requireable<any>;
            };
        };
        Pagination: import("@material-ui/core/OverridableComponent").OverridableComponent<{
            props: Pick<import("@material-ui/core/TableCell").TableCellProps, "color" | "padding" | "hidden" | "size" | "style" | "title" | "ref" | "children" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "slot" | "spellCheck" | "tabIndex" | "inputMode" | "is" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "innerRef" | "variant" | "align" | "colSpan" | "headers" | "rowSpan" | "scope" | "sortDirection"> & {
                ActionsComponent?: "object" | "header" | "meter" | "ruby" | "table" | "small" | "sub" | "embed" | "caption" | "menu" | "menuitem" | "abbr" | "address" | "article" | "aside" | "b" | "bdi" | "bdo" | "big" | "blockquote" | "cite" | "code" | "col" | "colgroup" | "data" | "dd" | "del" | "details" | "dfn" | "div" | "dt" | "em" | "figcaption" | "figure" | "footer" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "hgroup" | "hr" | "i" | "iframe" | "img" | "input" | "kbd" | "keygen" | "legend" | "main" | "mark" | "nav" | "noindex" | "noscript" | "output" | "p" | "picture" | "rp" | "rt" | "s" | "samp" | "section" | "span" | "strong" | "summary" | "sup" | "tbody" | "td" | "tfoot" | "th" | "thead" | "time" | "tr" | "u" | "var" | "wbr" | "webview" | React.ComponentClass<import("@material-ui/core/TablePagination/TablePaginationActions").TablePaginationActionsProps, any> | React.FunctionComponent<import("@material-ui/core/TablePagination/TablePaginationActions").TablePaginationActionsProps> | undefined;
                backIconButtonProps?: Partial<{
                    action?: ((actions: import("@material-ui/core/ButtonBase").ButtonBaseActions) => void) | undefined;
                    buttonRef?: ((instance: unknown) => void) | React.RefObject<unknown> | null | undefined;
                    centerRipple?: boolean | undefined;
                    disabled?: boolean | undefined;
                    disableRipple?: boolean | undefined;
                    disableTouchRipple?: boolean | undefined;
                    focusRipple?: boolean | undefined;
                    focusVisibleClassName?: string | undefined;
                    onFocusVisible?: ((event: React.FocusEvent<any>) => void) | undefined;
                    TouchRippleProps?: Partial<import("@material-ui/core/ButtonBase/TouchRipple").TouchRippleProps> | undefined;
                    color?: "inherit" | "default" | "primary" | "secondary" | undefined;
                    disableFocusRipple?: boolean | undefined;
                    edge?: false | "end" | "start" | undefined;
                    size?: "medium" | "small" | undefined;
                    className?: string | undefined;
                    style?: React.CSSProperties | undefined;
                    classes?: Partial<Record<import("@material-ui/core/IconButton").IconButtonClassKey, string>> | undefined;
                    innerRef?: ((instance: any) => void) | React.RefObject<any> | null | undefined;
                    hidden?: boolean | undefined;
                    form?: string | undefined;
                    title?: string | undefined;
                    ref?: ((instance: HTMLButtonElement | null) => void) | React.RefObject<HTMLButtonElement> | null | undefined;
                    children?: React.ReactNode;
                    defaultChecked?: boolean | undefined;
                    defaultValue?: string | string[] | undefined;
                    suppressContentEditableWarning?: boolean | undefined;
                    suppressHydrationWarning?: boolean | undefined;
                    accessKey?: string | undefined;
                    contentEditable?: boolean | undefined;
                    contextMenu?: string | undefined;
                    dir?: string | undefined;
                    draggable?: boolean | undefined;
                    id?: string | undefined;
                    lang?: string | undefined;
                    placeholder?: string | undefined;
                    slot?: string | undefined;
                    spellCheck?: boolean | undefined;
                    tabIndex?: number | undefined;
                    inputMode?: string | undefined;
                    is?: string | undefined;
                    radioGroup?: string | undefined;
                    role?: string | undefined;
                    about?: string | undefined;
                    datatype?: string | undefined;
                    inlist?: any;
                    prefix?: string | undefined;
                    property?: string | undefined;
                    resource?: string | undefined;
                    typeof?: string | undefined;
                    vocab?: string | undefined;
                    autoCapitalize?: string | undefined;
                    autoCorrect?: string | undefined;
                    autoSave?: string | undefined;
                    itemProp?: string | undefined;
                    itemScope?: boolean | undefined;
                    itemType?: string | undefined;
                    itemID?: string | undefined;
                    itemRef?: string | undefined;
                    results?: number | undefined;
                    security?: string | undefined;
                    unselectable?: "on" | "off" | undefined;
                    'aria-activedescendant'?: string | undefined;
                    'aria-atomic'?: boolean | "false" | "true" | undefined;
                    'aria-autocomplete'?: "both" | "none" | "inline" | "list" | undefined;
                    'aria-busy'?: boolean | "false" | "true" | undefined;
                    'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
                    'aria-colcount'?: number | undefined;
                    'aria-colindex'?: number | undefined;
                    'aria-colspan'?: number | undefined;
                    'aria-controls'?: string | undefined;
                    'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date" | undefined;
                    'aria-describedby'?: string | undefined;
                    'aria-details'?: string | undefined;
                    'aria-disabled'?: boolean | "false" | "true" | undefined;
                    'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
                    'aria-errormessage'?: string | undefined;
                    'aria-expanded'?: boolean | "false" | "true" | undefined;
                    'aria-flowto'?: string | undefined;
                    'aria-grabbed'?: boolean | "false" | "true" | undefined;
                    'aria-haspopup'?: boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree" | undefined;
                    'aria-hidden'?: boolean | "false" | "true" | undefined;
                    'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
                    'aria-keyshortcuts'?: string | undefined;
                    'aria-label'?: string | undefined;
                    'aria-labelledby'?: string | undefined;
                    'aria-level'?: number | undefined;
                    'aria-live'?: "off" | "assertive" | "polite" | undefined;
                    'aria-modal'?: boolean | "false" | "true" | undefined;
                    'aria-multiline'?: boolean | "false" | "true" | undefined;
                    'aria-multiselectable'?: boolean | "false" | "true" | undefined;
                    'aria-orientation'?: "horizontal" | "vertical" | undefined;
                    'aria-owns'?: string | undefined;
                    'aria-placeholder'?: string | undefined;
                    'aria-posinset'?: number | undefined;
                    'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
                    'aria-readonly'?: boolean | "false" | "true" | undefined;
                    'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals" | undefined;
                    'aria-required'?: boolean | "false" | "true" | undefined;
                    'aria-roledescription'?: string | undefined;
                    'aria-rowcount'?: number | undefined;
                    'aria-rowindex'?: number | undefined;
                    'aria-rowspan'?: number | undefined;
                    'aria-selected'?: boolean | "false" | "true" | undefined;
                    'aria-setsize'?: number | undefined;
                    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
                    'aria-valuemax'?: number | undefined;
                    'aria-valuemin'?: number | undefined;
                    'aria-valuenow'?: number | undefined;
                    'aria-valuetext'?: string | undefined;
                    dangerouslySetInnerHTML?: {
                        __html: string;
                    } | undefined;
                    onCopy?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
                    onCopyCapture?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
                    onCut?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
                    onCutCapture?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
                    onPaste?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
                    onPasteCapture?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
                    onCompositionEnd?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
                    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
                    onCompositionStart?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
                    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
                    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
                    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
                    onFocus?: ((event: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
                    onFocusCapture?: ((event: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
                    onBlur?: ((event: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
                    onBlurCapture?: ((event: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
                    onChange?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onChangeCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onBeforeInput?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onBeforeInputCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onInput?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onInputCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onReset?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onResetCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onSubmit?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onSubmitCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onInvalid?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onInvalidCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onLoad?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onError?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onErrorCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onKeyDown?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
                    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
                    onKeyPress?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
                    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
                    onKeyUp?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
                    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
                    onAbort?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onAbortCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onCanPlay?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onDurationChange?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onEmptied?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onEncrypted?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onEnded?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onEndedCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadedData?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadStart?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onPause?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onPauseCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onPlay?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onPlayCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onPlaying?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onProgress?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onProgressCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onRateChange?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSeeked?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSeeking?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onStalled?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onStalledCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSuspend?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onVolumeChange?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onWaiting?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onAuxClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onAuxClickCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onClickCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onContextMenu?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onContextMenuCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onDoubleClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onDrag?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragEnd?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragEndCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragEnter?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragEnterCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragExit?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragExitCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragLeave?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragLeaveCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragOver?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragOverCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragStart?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragStartCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDrop?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDropCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onMouseDown?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseDownCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseEnter?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseLeave?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseMove?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseOut?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseOutCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseOver?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseOverCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseUp?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseUpCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onSelect?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSelectCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onTouchCancel?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchEnd?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchEndCapture?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchMove?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchStart?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchStartCapture?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerDown?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerDownCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerMove?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerUp?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerUpCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerCancel?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerEnter?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerLeave?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerOver?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerOverCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerOut?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerOutCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onGotPointerCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onLostPointerCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onScroll?: ((event: React.UIEvent<HTMLButtonElement>) => void) | undefined;
                    onScrollCapture?: ((event: React.UIEvent<HTMLButtonElement>) => void) | undefined;
                    onWheel?: ((event: React.WheelEvent<HTMLButtonElement>) => void) | undefined;
                    onWheelCapture?: ((event: React.WheelEvent<HTMLButtonElement>) => void) | undefined;
                    onAnimationStart?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
                    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
                    onAnimationEnd?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
                    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
                    onAnimationIteration?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
                    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
                    onTransitionEnd?: ((event: React.TransitionEvent<HTMLButtonElement>) => void) | undefined;
                    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLButtonElement>) => void) | undefined;
                    value?: string | number | string[] | undefined;
                    key?: string | number | undefined;
                    autoFocus?: boolean | undefined;
                    formAction?: string | undefined;
                    formEncType?: string | undefined;
                    formMethod?: string | undefined;
                    formNoValidate?: boolean | undefined;
                    formTarget?: string | undefined;
                    name?: string | undefined;
                    type?: "button" | "reset" | "submit" | undefined;
                }> | undefined;
                count: number;
                labelDisplayedRows?: ((paginationInfo: import("@material-ui/core/TablePagination").LabelDisplayedRowsArgs) => React.ReactNode) | undefined;
                labelRowsPerPage?: React.ReactNode;
                nextIconButtonProps?: Partial<{
                    action?: ((actions: import("@material-ui/core/ButtonBase").ButtonBaseActions) => void) | undefined;
                    buttonRef?: ((instance: unknown) => void) | React.RefObject<unknown> | null | undefined;
                    centerRipple?: boolean | undefined;
                    disabled?: boolean | undefined;
                    disableRipple?: boolean | undefined;
                    disableTouchRipple?: boolean | undefined;
                    focusRipple?: boolean | undefined;
                    focusVisibleClassName?: string | undefined;
                    onFocusVisible?: ((event: React.FocusEvent<any>) => void) | undefined;
                    TouchRippleProps?: Partial<import("@material-ui/core/ButtonBase/TouchRipple").TouchRippleProps> | undefined;
                    color?: "inherit" | "default" | "primary" | "secondary" | undefined;
                    disableFocusRipple?: boolean | undefined;
                    edge?: false | "end" | "start" | undefined;
                    size?: "medium" | "small" | undefined;
                    className?: string | undefined;
                    style?: React.CSSProperties | undefined;
                    classes?: Partial<Record<import("@material-ui/core/IconButton").IconButtonClassKey, string>> | undefined;
                    innerRef?: ((instance: any) => void) | React.RefObject<any> | null | undefined;
                    hidden?: boolean | undefined;
                    form?: string | undefined;
                    title?: string | undefined;
                    ref?: ((instance: HTMLButtonElement | null) => void) | React.RefObject<HTMLButtonElement> | null | undefined;
                    children?: React.ReactNode;
                    defaultChecked?: boolean | undefined;
                    defaultValue?: string | string[] | undefined;
                    suppressContentEditableWarning?: boolean | undefined;
                    suppressHydrationWarning?: boolean | undefined;
                    accessKey?: string | undefined;
                    contentEditable?: boolean | undefined;
                    contextMenu?: string | undefined;
                    dir?: string | undefined;
                    draggable?: boolean | undefined;
                    id?: string | undefined;
                    lang?: string | undefined;
                    placeholder?: string | undefined;
                    slot?: string | undefined;
                    spellCheck?: boolean | undefined;
                    tabIndex?: number | undefined;
                    inputMode?: string | undefined;
                    is?: string | undefined;
                    radioGroup?: string | undefined;
                    role?: string | undefined;
                    about?: string | undefined;
                    datatype?: string | undefined;
                    inlist?: any;
                    prefix?: string | undefined;
                    property?: string | undefined;
                    resource?: string | undefined;
                    typeof?: string | undefined;
                    vocab?: string | undefined;
                    autoCapitalize?: string | undefined;
                    autoCorrect?: string | undefined;
                    autoSave?: string | undefined;
                    itemProp?: string | undefined;
                    itemScope?: boolean | undefined;
                    itemType?: string | undefined;
                    itemID?: string | undefined;
                    itemRef?: string | undefined;
                    results?: number | undefined;
                    security?: string | undefined;
                    unselectable?: "on" | "off" | undefined;
                    'aria-activedescendant'?: string | undefined;
                    'aria-atomic'?: boolean | "false" | "true" | undefined;
                    'aria-autocomplete'?: "both" | "none" | "inline" | "list" | undefined;
                    'aria-busy'?: boolean | "false" | "true" | undefined;
                    'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
                    'aria-colcount'?: number | undefined;
                    'aria-colindex'?: number | undefined;
                    'aria-colspan'?: number | undefined;
                    'aria-controls'?: string | undefined;
                    'aria-current'?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date" | undefined;
                    'aria-describedby'?: string | undefined;
                    'aria-details'?: string | undefined;
                    'aria-disabled'?: boolean | "false" | "true" | undefined;
                    'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
                    'aria-errormessage'?: string | undefined;
                    'aria-expanded'?: boolean | "false" | "true" | undefined;
                    'aria-flowto'?: string | undefined;
                    'aria-grabbed'?: boolean | "false" | "true" | undefined;
                    'aria-haspopup'?: boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree" | undefined;
                    'aria-hidden'?: boolean | "false" | "true" | undefined;
                    'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
                    'aria-keyshortcuts'?: string | undefined;
                    'aria-label'?: string | undefined;
                    'aria-labelledby'?: string | undefined;
                    'aria-level'?: number | undefined;
                    'aria-live'?: "off" | "assertive" | "polite" | undefined;
                    'aria-modal'?: boolean | "false" | "true" | undefined;
                    'aria-multiline'?: boolean | "false" | "true" | undefined;
                    'aria-multiselectable'?: boolean | "false" | "true" | undefined;
                    'aria-orientation'?: "horizontal" | "vertical" | undefined;
                    'aria-owns'?: string | undefined;
                    'aria-placeholder'?: string | undefined;
                    'aria-posinset'?: number | undefined;
                    'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
                    'aria-readonly'?: boolean | "false" | "true" | undefined;
                    'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals" | undefined;
                    'aria-required'?: boolean | "false" | "true" | undefined;
                    'aria-roledescription'?: string | undefined;
                    'aria-rowcount'?: number | undefined;
                    'aria-rowindex'?: number | undefined;
                    'aria-rowspan'?: number | undefined;
                    'aria-selected'?: boolean | "false" | "true" | undefined;
                    'aria-setsize'?: number | undefined;
                    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
                    'aria-valuemax'?: number | undefined;
                    'aria-valuemin'?: number | undefined;
                    'aria-valuenow'?: number | undefined;
                    'aria-valuetext'?: string | undefined;
                    dangerouslySetInnerHTML?: {
                        __html: string;
                    } | undefined;
                    onCopy?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
                    onCopyCapture?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
                    onCut?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
                    onCutCapture?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
                    onPaste?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
                    onPasteCapture?: ((event: React.ClipboardEvent<HTMLButtonElement>) => void) | undefined;
                    onCompositionEnd?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
                    onCompositionEndCapture?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
                    onCompositionStart?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
                    onCompositionStartCapture?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
                    onCompositionUpdate?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
                    onCompositionUpdateCapture?: ((event: React.CompositionEvent<HTMLButtonElement>) => void) | undefined;
                    onFocus?: ((event: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
                    onFocusCapture?: ((event: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
                    onBlur?: ((event: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
                    onBlurCapture?: ((event: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
                    onChange?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onChangeCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onBeforeInput?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onBeforeInputCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onInput?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onInputCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onReset?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onResetCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onSubmit?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onSubmitCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onInvalid?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onInvalidCapture?: ((event: React.FormEvent<HTMLButtonElement>) => void) | undefined;
                    onLoad?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onError?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onErrorCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onKeyDown?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
                    onKeyDownCapture?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
                    onKeyPress?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
                    onKeyPressCapture?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
                    onKeyUp?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
                    onKeyUpCapture?: ((event: React.KeyboardEvent<HTMLButtonElement>) => void) | undefined;
                    onAbort?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onAbortCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onCanPlay?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onCanPlayCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onCanPlayThrough?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onDurationChange?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onDurationChangeCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onEmptied?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onEmptiedCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onEncrypted?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onEncryptedCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onEnded?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onEndedCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadedData?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadedDataCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadedMetadata?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadStart?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onLoadStartCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onPause?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onPauseCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onPlay?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onPlayCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onPlaying?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onPlayingCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onProgress?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onProgressCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onRateChange?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onRateChangeCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSeeked?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSeekedCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSeeking?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSeekingCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onStalled?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onStalledCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSuspend?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSuspendCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onTimeUpdate?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onTimeUpdateCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onVolumeChange?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onVolumeChangeCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onWaiting?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onWaitingCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onAuxClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onAuxClickCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onClickCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onContextMenu?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onContextMenuCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onDoubleClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onDoubleClickCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onDrag?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragEnd?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragEndCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragEnter?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragEnterCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragExit?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragExitCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragLeave?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragLeaveCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragOver?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragOverCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragStart?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDragStartCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDrop?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onDropCapture?: ((event: React.DragEvent<HTMLButtonElement>) => void) | undefined;
                    onMouseDown?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseDownCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseEnter?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseLeave?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseMove?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseMoveCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseOut?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseOutCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseOver?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseOverCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseUp?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onMouseUpCapture?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
                    onSelect?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onSelectCapture?: ((event: React.SyntheticEvent<HTMLButtonElement, Event>) => void) | undefined;
                    onTouchCancel?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchCancelCapture?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchEnd?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchEndCapture?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchMove?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchMoveCapture?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchStart?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onTouchStartCapture?: ((event: React.TouchEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerDown?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerDownCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerMove?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerMoveCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerUp?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerUpCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerCancel?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerCancelCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerEnter?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerEnterCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerLeave?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerLeaveCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerOver?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerOverCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerOut?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onPointerOutCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onGotPointerCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onGotPointerCaptureCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onLostPointerCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onLostPointerCaptureCapture?: ((event: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
                    onScroll?: ((event: React.UIEvent<HTMLButtonElement>) => void) | undefined;
                    onScrollCapture?: ((event: React.UIEvent<HTMLButtonElement>) => void) | undefined;
                    onWheel?: ((event: React.WheelEvent<HTMLButtonElement>) => void) | undefined;
                    onWheelCapture?: ((event: React.WheelEvent<HTMLButtonElement>) => void) | undefined;
                    onAnimationStart?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
                    onAnimationStartCapture?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
                    onAnimationEnd?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
                    onAnimationEndCapture?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
                    onAnimationIteration?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
                    onAnimationIterationCapture?: ((event: React.AnimationEvent<HTMLButtonElement>) => void) | undefined;
                    onTransitionEnd?: ((event: React.TransitionEvent<HTMLButtonElement>) => void) | undefined;
                    onTransitionEndCapture?: ((event: React.TransitionEvent<HTMLButtonElement>) => void) | undefined;
                    value?: string | number | string[] | undefined;
                    key?: string | number | undefined;
                    autoFocus?: boolean | undefined;
                    formAction?: string | undefined;
                    formEncType?: string | undefined;
                    formMethod?: string | undefined;
                    formNoValidate?: boolean | undefined;
                    formTarget?: string | undefined;
                    name?: string | undefined;
                    type?: "button" | "reset" | "submit" | undefined;
                }> | undefined;
                onChangePage: (event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null, page: number) => void;
                onChangeRowsPerPage?: ((event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void) | undefined;
                page: number;
                rowsPerPage: number;
                rowsPerPageOptions?: number[] | undefined;
                SelectProps?: Partial<import("@material-ui/core/Select").SelectProps> | undefined;
            };
            defaultComponent: React.ComponentType<Pick<import("@material-ui/core/TableCell").TableCellProps, "color" | "padding" | "hidden" | "size" | "style" | "title" | "ref" | "children" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "slot" | "spellCheck" | "tabIndex" | "inputMode" | "is" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "innerRef" | "variant" | "align" | "colSpan" | "headers" | "rowSpan" | "scope" | "sortDirection">>;
            classKey: import("@material-ui/core/TablePagination").TablePaginationClassKey;
        }>;
        Row: typeof MComponents.MTableBodyRow;
        Toolbar: React.ComponentType<Pick<any, string | number | symbol> & import("@material-ui/core").StyledComponentProps<"title" | "root" | "highlight" | "spacer" | "actions" | "searchField">>;
    };
    data: never[];
    icons: {
        Add: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        Check: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        Clear: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        Delete: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        DetailPanel: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        Edit: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        Export: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        Filter: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        FirstPage: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        LastPage: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        NextPage: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        PreviousPage: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        ResetSearch: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        Search: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        SortArrow: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        ThirdStateCheck: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
        ViewColumn: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
    };
    isLoading: boolean;
    title: string;
    options: {
        actionsColumnIndex: number;
        addRowPosition: string;
        columnsButton: boolean;
        detailPanelType: string;
        debounceInterval: number;
        doubleHorizontalScroll: boolean;
        emptyRowsWhenPaging: boolean;
        exportAllData: boolean;
        exportButton: boolean;
        exportDelimiter: string;
        filtering: boolean;
        header: boolean;
        loadingType: string;
        padding: string;
        paging: boolean;
        pageSize: number;
        pageSizeOptions: number[];
        paginationType: string;
        showEmptyDataSourceMessage: boolean;
        showFirstLastPageButtons: boolean;
        showSelectAllCheckbox: boolean;
        search: boolean;
        showTitle: boolean;
        showTextRowsSelected: boolean;
        toolbarButtonAlignment: string;
        searchFieldAlignment: string;
        searchFieldStyle: {};
        selection: boolean;
        selectionProps: {};
        sorting: boolean;
        toolbar: boolean;
        defaultExpanded: boolean;
        detailPanelColumnAlignment: string;
    };
    localization: {
        grouping: {
            groupedBy: string;
            placeholder: string;
        };
        pagination: {
            labelDisplayedRows: string;
            labelRowsPerPage: string;
            labelRowsSelect: string;
        };
        toolbar: {};
        header: {};
        body: {
            filterRow: {};
            editRow: {
                saveTooltip: string;
                cancelTooltip: string;
                deleteText: string;
            };
            addTooltip: string;
            deleteTooltip: string;
            editTooltip: string;
        };
    };
    style: {};
};
