export declare class DataManager {
    applyFilters: boolean;
    applySearch: boolean;
    currentPage: number;
    detailPanelType: string;
    lastDetailPanelRow: any;
    lastEditingRow: any;
    orderBy: number;
    orderDirection: string;
    pageSize: number;
    paging: boolean;
    parentFunc: any;
    searchText: string;
    selectedCount: number;
    treefiedDataLength: number;
    treeDataMaxLevel: number;
    defaultExpanded: boolean;
    data: any[];
    columns: any[];
    filteredData: any[];
    searchedData: any[];
    groupedData: any[];
    treefiedData: any;
    sortedData: any[];
    pagedData: any[];
    renderData: any[];
    filtered: boolean;
    searched: boolean;
    grouped: boolean;
    treefied: boolean;
    sorted: boolean;
    paged: boolean;
    rootGroupsIndex: any;
    setData(data: any): void;
    setColumns(columns: any): void;
    setDefaultExpanded(expanded: any): void;
    changeApplySearch(applySearch: any): void;
    changeApplyFilters(applyFilters: any): void;
    changePaging(paging: any): void;
    changeCurrentPage(currentPage: any): void;
    changePageSize(pageSize: any): void;
    changeParentFunc(parentFunc: any): void;
    changeFilterValue(columnId: any, value: any): void;
    changeRowSelected(checked: any, path: any): void;
    changeDetailPanelVisibility(path: any, render: any): void;
    changeGroupExpand(path: any): void;
    changeSearchText(searchText: any): void;
    changeRowEditing(rowData?: any, mode?: any): void;
    changeAllSelected(checked: any): void;
    changeOrder(orderBy: any, orderDirection: any): void;
    changeGroupOrder(columnId: any): void;
    changeColumnHidden(column: any, hidden: any): void;
    changeTreeExpand(path: any): void;
    changeDetailPanelType(type: any): void;
    changeByDrag(result: any): void;
    expandTreeForNodes: (data: any) => void;
    findDataByPath: (renderData: any, path: any) => any;
    findGroupByGroupPath(renderData: any, path: any): any;
    getFieldValue: (rowData: any, columnDef: any, lookup?: boolean) => any;
    isDataType(type: any): boolean;
    sort(a: any, b: any, type: any): number;
    sortList(list: any): any;
    getRenderState: () => {
        columns: any[];
        currentPage: number;
        data: any[];
        lastEditingRow: any;
        orderBy: number;
        orderDirection: string;
        originalData: any[];
        pageSize: number;
        renderData: any[];
        searchText: string;
        selectedCount: number;
        treefiedDataLength: number;
        treeDataMaxLevel: number;
    };
    filterData: () => void;
    searchData: () => void;
    groupData(): void;
    treefyData(): void;
    sortData(): void;
    pageData(): void;
}
